#!/usr/bin/env bash

VERSION=2.8.0

# -----------------------------------------------------------------------------
# Colors
# -----------------------------------------------------------------------------

COLOR_INFO="\e[32m" # green
COLOR_WARNING="\e[33m" # yellow
COLOR_ERROR="\e[31m" # red
COLOR_END="\e[0m"

# -----------------------------------------------------------------------------
# Balena.io specific functions
# -----------------------------------------------------------------------------

# Load Balena methods
if [ "$BALENA_DEVICE_UUID" != "" ]; then
    source ./balena.sh
fi

function idle() {
    echo -e "${COLOR_INFO}GATEWAY_EUI: ${GATEWAY_EUI}${COLOR_END}"
   [[ "$BALENA_DEVICE_UUID" != "" ]] && balena-idle || sleep 2; exit 1
}

function restart_if_balena() {
   [[ "$BALENA_DEVICE_UUID" != "" ]] && \
   echo -e "${COLOR_INFO}Service will restart now${COLOR_END}" && \
   balena-idle 
}

# -----------------------------------------------------------------------------
# Utils
# -----------------------------------------------------------------------------

function chip_id {

    local DESIGN=$1
    local DEVICE=$2
    
    TIMEOUT=${TIMEOUT:-3}

    if [[ "$DESIGN" == "auto" ]] || [[ "$DESIGN" == "corecell" ]]; then
        if [[ "$DEVICE" == *"tty"* ]]; then COM_TYPE="-u"; fi
        local CHIP_ID=$( timeout ${TIMEOUT}s /app/design-corecell/bin/chip_id $COM_TYPE -d $DEVICE | grep 'EUI' | sed 's/^.*0x//' | tr [a-z] [A-Z] )
        if [[ "${CHIP_ID}" != "" ]]; then
            OUTPUT=("corecell" $DEVICE $CHIP_ID)
            return 1
        fi
        fi
        
    #if [[ "$DESIGN" == "auto" ]] || [[ "$DESIGN" == "picocell" ]]; then
    #    local CHIP_ID=$( timeout ${TIMEOUT}s /app/design-picocell/bin/chip_id | sed 's/^.*0x//' | tr [a-z] [A-Z] )
    #    if [[ "${CHIP_ID}" != "" ]]; then
    #        OUTPUT=("picocell" $DEVICE $CHIP_ID)
    #        return 1
    #    fi
    #fi
        
    return 0
    
}

function create_reset {

    local RESET_FILE=/app/config/reset.sh
    
    if [[ "${INTERFACE}" == "USB" ]]; then
        echo "" > $RESET_FILE
    else
        if [[ $USE_LIBGPIOD -eq 0 ]]; then
            cp /app/reset.sh.legacy $RESET_FILE
        else
            cp /app/reset.sh.gpiod $RESET_FILE
        fi
        sed -i "s#{{GPIO_CHIP}}#${GPIO_CHIP}#" $RESET_FILE
        sed -i "s#{{RESET_GPIO}}#${RESET_GPIO:-17}#" $RESET_FILE
        sed -i "s#{{POWER_EN_GPIO}}#${POWER_EN_GPIO:-0}#" $RESET_FILE
        sed -i "s#{{POWER_EN_LOGIC}}#${POWER_EN_LOGIC:-1}#" $RESET_FILE
    fi
    chmod +x $RESET_FILE
    ln -s $RESET_FILE /app/config/reset_lgw.sh 2>/dev/null

}

function discover_concentrator {

    local INTERFACE=$1
    local DESIGN=$2
    local RADIO_NUM=$3

    # Grab potential devices based on interface
    if [[ "${INTERFACE}" == "AUTO" ]]; then
        DEVICES=$( ls /dev/spidev* /dev/ttyACM* /dev/ttyUSB* 2> /dev/null )
    elif [[ "${INTERFACE}" == "SPI" ]]; then
        DEVICES=$( ls /dev/spidev* 2> /dev/null )
    else
        DEVICES=$( ls /dev/ttyACM* /dev/ttyUSB* 2> /dev/null )
    fi

    # Look for devices
    FOUND=0
    for DEVICE in $DEVICES; do
        chip_id ${DESIGN,,} $DEVICE
        if [[ $? -eq 1 ]]; then
            FOUND=$(( $FOUND + 1 ))
            if [[ ${FOUND} -eq $RADIO_NUM ]]; then
                # We pass the OUTPUT to the caller
                break
            fi

        fi
    done

    return $FOUND

}

function tts_autoprovision() {

    echo "Gateway provisioning using provided TTS_PERSONAL_KEY"

    # Autoprovision variables needed
    TTS_USERNAME=${TTS_USERNAME:-"none"}
    GATEWAY_PREFIX=${GATEWAY_PREFIX:-"eui"}
    GATEWAY_ID=${GATEWAY_ID:-"${GATEWAY_PREFIX,,}-${GATEWAY_EUI,,}"}
    GATEWAY_NAME=${GATEWAY_NAME:-${GATEWAY_ID}}
    
    # Autoprovision regions defined here: https://www.thethingsindustries.com/docs/reference/frequency-plans/
    TTS_FREQUENCY_PLAN_ID=${TTS_FREQUENCY_PLAN_ID:-""}
    if [[ "$TTS_FREQUENCY_PLAN_ID" == "" ]]; then
        if [[ "$TTS_REGION" == "nam1" ]]; then
            TTS_FREQUENCY_PLAN_ID="US_902_928_FSB_2"
        elif [[ "$TTS_REGION" == "au1" ]]; then
            TTS_FREQUENCY_PLAN_ID="AU_915_928_FSB_2"
        else
            TTS_FREQUENCY_PLAN_ID="EU_863_870_TTN"
        fi
    fi

    local API_KEY_NAME="autoprovision-lns-key"
    local RAW

    RAW=$(curl -s --location \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer '$TTS_PERSONAL_KEY'' \
        --header 'Content-Type: application/json' \
        --request POST \
        --data-raw '{
            "gateway": {
            "ids": {
                "gateway_id": "'$GATEWAY_ID'",
                "eui": "'$GATEWAY_EUI'"
            },
            "name": "'$GATEWAY_NAME'",
            "gateway_server_address": "'$SERVER'",
            "frequency_plan_id": "'$TTS_FREQUENCY_PLAN_ID'"
            }
        }' \
        'https://'$SERVER'/api/v3/users/'$TTS_USERNAME'/gateways' 2>/dev/null)
    
    #echo $RAW | jq
    local CODE=$(echo $RAW | jq --raw-output '.code' 2>/dev/null)
    local MESSAGE=$(echo $RAW | jq --raw-output '.message_format' 2>/dev/null)

    # ToDo: find more error codes when provision a gateway via API.   
    if [[ "$CODE" == "null" ]]; then
        echo "No errors autoprovisioning the gateway!"
    elif [[ "$CODE" == 6 ]]; then
        echo -e "${COLOR_WARNING}WARNING: The gateway $GATEWAY_ID is already registered (by you or someone else)${COLOR_END}"
        #idle
    elif [[ "$CODE" == 9 ]]; then
        echo -e "${COLOR_WARNING}WARNING: The gateway had already been autoprovisioned${COLOR_END}"
        #idle
    else
        echo -e "${COLOR_ERROR}ERROR: The gateway had an error when autoprovisioned: $MESSAGE ($CODE)${COLOR_END}\n"
        idle
    fi

    # List api keys
    local IDS=$(curl -s --location \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer '$TTS_PERSONAL_KEY'' \
        --header 'Content-Type: application/json' \
        --request GET \
        'https://'$SERVER'/api/v3/gateways/'$GATEWAY_ID'/api-keys' | jq '.api_keys[] | select(.name == "'$API_KEY_NAME'") | .id' 2>/dev/null)
    
    # Delete previous API keys
    for ID in ${IDS[@]}; do
        ID=$(echo $ID | tr -d '"')
        curl -s --location \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer '$TTS_PERSONAL_KEY'' \
            --header 'Content-Type: application/json' \
            --request PUT \
            --data-raw '{
                "name":"'$API_KEY_NAME'",
                "rights":[],
                "expires_at":null
            }' \
            'https://'$SERVER'/api/v3/gateways/'$GATEWAY_ID'/api-keys/'$ID >/dev/null
    done

    # Create new api key
    RAW=$(curl -s --location \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer '$TTS_PERSONAL_KEY'' \
        --header 'Content-Type: application/json' \
        --request POST \
        --data-raw '{
            "name":"'$API_KEY_NAME'",
            "rights":["RIGHT_GATEWAY_LINK"],
            "expires_at":null
        }' \
        'https://'$SERVER'/api/v3/gateways/'$GATEWAY_ID'/api-keys' 2>/dev/null)

    #echo $RAW | jq
    local KEY=$(echo $RAW | jq --raw-output '.key' 2>/dev/null)

    if [[ "$KEY" != "null" ]]; then
        TC_KEY=$KEY
        echo "TC_KEY successfully generated"
        [[ "$BALENA_DEVICE_UUID" != "" ]] && balena_set_variable "TC_KEY" "$TC_KEY"
        restart_if_balena
    fi

}

function clean_certs_keys() {
    
    local CONTENT=$1

    if [[ "$CONTENT" == *-----* ]]; then
    
        CONTENT=$( echo "$CONTENT" | sed 's/-----/-/g' )
        readarray -d '-' -t PARTS <<< "$CONTENT"
        local HEADER=${PARTS[1]}
        local KEY=$( echo "${PARTS[2]}" | tr '\n' ' ' | sed 's/\s//g' )
        local FOOTER=${PARTS[3]}
        echo -e "-----$HEADER-----\n$KEY\n-----$FOOTER-----"

    else
        
        echo $CONTENT
    
    fi
        
}

# -----------------------------------------------------------------------------
# Preparing configuration
# -----------------------------------------------------------------------------

# Move into configuration folder
mkdir -p config
pushd config >> /dev/null
CONFIG_FILE=./station.json

# -----------------------------------------------------------------------------
# Server configuration
# -----------------------------------------------------------------------------

# Defaults to TTN server v3, `eu1` region, 
# use a custom SERVER, CUPS_URI or TC_URI to change this.
# If TTS_TENANT is defined different than "ttn", it will be used to build the
# tenant URL under thethings.industries, otherwise only the region will be used
# to build the URL under cloud.thethings.network.

TTN_REGION=${TTN_REGION:-"eu1"}
TTS_REGION=${TTS_REGION:-$TTN_REGION}
TTS_TENANT=${TTS_TENANT:-"ttn"}
if [[ "$TTS_TENANT" == "ttn" ]]; then
    SERVER=${SERVER:-"${TTS_REGION}.cloud.thethings.network"}
else
    SERVER=${SERVER:-"${TTS_TENANT}.${TTS_REGION}.cloud.thethings.industries"}
fi
CUPS_URI=${CUPS_URI:-"https://${SERVER}:443"} 
TC_URI=${TC_URI:-"wss://${SERVER}:8887"} 

# -----------------------------------------------------------------------------
# Mode (static/dynamic) & protocol (cups/lns)
# -----------------------------------------------------------------------------

# New USE_CUPS variable, will be mandatory in the future
# Possible values are 0 or 1, setting it here to 2 when undefined
USE_CUPS=${USE_CUPS:-2} # undefined by default
PROTOCOL=""

# Configuration mode
if [[ -f $CONFIG_FILE ]]; then 
    MODE="STATIC"
    if [[ $USE_CUPS -eq 1 ]]; then
        PROTOCOL="CUPS"
    elif [[ -f ./cups.key ]] && [[ $USE_CUPS -ne 0 ]]; then
        PROTOCOL="CUPS"
        echo -e "${COLOR_WARNING}WARNING: USE_CUPS variable will be mandatory in future versions to enable CUPS${COLOR_END}"
    elif [[ -f ./tc.key ]]; then
        PROTOCOL="LNS"
    elif [[ "$TTS_PERSONAL_KEY" != "" ]] && [[ "$TTS_USERNAME" != "" ]]; then
        tts_autoprovision
        if [[ "$TC_KEY" != "" ]]; then 
            PROTOCOL="LNS"
        fi
    fi
    if [[ "$PROTOCOL" == "" ]]; then
        echo -e "${COLOR_ERROR}ERROR: Custom configuration folder found, but missing files: either force key-less CUPS with USE_CUPS=1 or provide a valid cups.key or tc.key files or TTS_PERSONAL_KEY and TTS_USERNAME variable${COLOR_END}"
        idle
    fi
else
    MODE="DYNAMIC"
    if [[ $USE_CUPS -eq 1 ]]; then
        PROTOCOL="CUPS"
    elif [[ "$CUPS_KEY" != "" ]] && [[ $USE_CUPS -ne 0 ]]; then
        PROTOCOL="CUPS"
        echo -e "${COLOR_WARNING}WARNING: USE_CUPS variable will be mandatory in future versions to enable CUPS${COLOR_END}"
    elif [[ "$TC_KEY" != "" ]]; then 
        PROTOCOL="LNS"
    elif [[ "$TTS_PERSONAL_KEY" != "" ]] && [[ "$TTS_USERNAME" != "" ]]; then
        tts_autoprovision
        if [[ "$TC_KEY" != "" ]]; then 
            PROTOCOL="LNS"
        fi
    fi
    if [[ "$PROTOCOL" == "" ]]; then
        echo -e "${COLOR_ERROR}ERROR: Missing configuration, either force key-less CUPS with USE_CUPS=1 or define valid TC_KEY, CUPS_KEY or TTS_PERSONAL_KEY and TTS_USERNAME${COLOR_END}"
        idle
    fi
fi

# -----------------------------------------------------------------------------
# Retrieve values from static config files
# -----------------------------------------------------------------------------

if [[ -f $CONFIG_FILE ]]; then

    # Get device & interface
    DEVICE=$(cat $CONFIG_FILE | jq '.[] | .device' | head -1 | sed 's/\("\|spi:\|usb:\)//g')
    if [[ "${DEVICE}" == *"spi"* ]]; then 
        INTERFACE="SPI"
    else 
        INTERFACE="USB"
    fi

    # Guess generic model
    if [[ `grep "SX1302_conf" $CONFIG_FILE` != "" ]]; then
        MODEL=${MODEL:-"SX1302"}
    elif [[ "${INTERFACE}" == "USB" ]]; then
        MODEL=${MODEL:-"SX1308"}
    else
        MODEL=${MODEL:-"SX1301"}
    fi

    # Get Gateway EUI
    GATEWAY_EUI=$(cat $CONFIG_FILE | jq '.station_conf.routerid' | sed 's/"//g')
    if [[ "${GATEWAY_EUI}" != "" ]]; then
        GATEWAY_EUI_SOURCE="file"
    fi

fi

# -----------------------------------------------------------------------------
# Auto-discover up-front
# -----------------------------------------------------------------------------

# If no MODEL defined we try to find the concentrator
if [[ "${MODEL}" == "" ]] || [[ "${MODEL}" == "AUTO" ]]; then
    
    unset MODEL

    create_reset 
    discover_concentrator ${INTERFACE:-AUTO} ${DESIGN:-AUTO} ${RADIO_NUM:-1}
    if [[ $? -ne 0 ]]; then
        
        DESIGN=${OUTPUT[0]}
        DEVICE=${OUTPUT[1]}
        CHIP_ID=${OUTPUT[2]}

        if [[ "${DESIGN}" == "corecell" ]]; then MODEL="SX1302"; fi
        if [[ "${DESIGN}" == "picocell" ]]; then MODEL="SX1308"; fi

    else
    
        echo -e "${COLOR_ERROR}ERROR: MODEL variable not set and we couldn't find any concentrator!${COLOR_END}"
	    idle

    fi
    
fi

# -----------------------------------------------------------------------------
# Check MODEL
# -----------------------------------------------------------------------------

# MODEL can be:
# * A developing gateway (mostly by RAKwireless), example: RAK7248
# * A concentrator module (by RAKWireless, IMST, SeeedStudio,...), example: RAK5416
# * A concentrator chip (Semtech's naming), example: SX1303
MODEL=${MODEL^^}

# Get the concentrator based on MODEL
declare -A MODEL_MAP=(

    # SX1301
    [SX1301]=SX1301
    [RAK7243]=SX1301 [RAK7243C]=SX1301 [RAK7244]=SX1301 [RAK7244C]=SX1301 [RAK831]=SX1301 [RAK833]=SX1301 [RAK2245]=SX1301 [RAK2247]=SX1301 
    [IC880A]=SX1301
    
    # SX1302
    [SX1302]=SX1302
    [RAK7248]=SX1302 [RAK7248C]=SX1302 [RAK7271]=SX1302 [RAK2287]=SX1302 [RAK5146]=SX1303
    [WM1302]=SX1302
    
    # SX1303
    [SX1303]=SX1303
    [RAK7371]=SX1303 
     
    # SX1308
    [SX1308]=SX1308
    [RAK7246]=SX1308 [RAK7246G]=SX1308 [RAK2246]=SX1308
    [R11E-LR8]=SX1308 [R11E-LR9]=SX1308 [R11E-LORA8]=SX1308 [R11E-LORA9]=SX1308
    
)

CONCENTRATOR=${MODEL_MAP[$MODEL]}
if [[ "${CONCENTRATOR}" == "" ]]; then
    echo -e "${COLOR_ERROR}ERROR: Unknown MODEL value ($MODEL). Valid values are: ${!MODEL_MAP[@]}${COLOR_END}"
	idle
fi

# -----------------------------------------------------------------------------
# Identify interface
# -----------------------------------------------------------------------------

# Backwards compatibility
DEVICE=${DEVICE:-$LORAGW_SPI}

# Models with USB interface
MODELS_WITH_USB="RAK7271 RAK7371 R11E-LORA8 R11E-LORA9 R11E-LR8 R11E-LR9"
if [[ $MODELS_WITH_USB =~ (^|[[:space:]])$MODEL($|[[:space:]]) ]]; then
    INTERFACE="${INTERFACE:-"USB"}"
elif [[ "${DEVICE}" == "AUTO" ]]; then
    INTERFACE=${INTERFACE:-"AUTO"}
else
    INTERFACE=${INTERFACE:-"SPI"}
fi

# -----------------------------------------------------------------------------
# Identify concentrator design
# -----------------------------------------------------------------------------

# Concentrator design
if [[ "${CONCENTRATOR}" == "SX1308" ]] && [[ "${INTERFACE}" == "USB" ]]; then
    DESIGN=${DESIGN:-"picocell"}
elif [[ "${CONCENTRATOR}" == "SX1301" ]] || [[ "${CONCENTRATOR}" == "SX1308" ]]; then
    DESIGN=${DESIGN:-"v2"}
else
    DESIGN=${DESIGN:-"corecell"}
fi
DESIGN=${DESIGN,,}

# -----------------------------------------------------------------------------
# GPIO configuration
# -----------------------------------------------------------------------------

# Backwards compatibility
RESET_GPIO=${RESET_GPIO:-$GW_RESET_GPIO}
POWER_EN_GPIO=${POWER_EN_GPIO:-$GW_POWER_EN_GPIO}

# If interface is USB disable RESET_GPIO, otherwise default to GPIO17 or pin 11
if [[ "${INTERFACE}" == "USB" ]]; then
    RESET_PIN=${RESET_PIN:-0}
else
    RESET_PIN=${RESET_PIN:-11}
fi

# Map hardware pins to GPIO on Raspberry Pi
declare -a GPIO_MAP=( 0 0 0 2 0 3 0 4 14 0 15 17 18 27 0 22 23 0 24 10 0 9 25 11 8 0 7 0 1 5 0 6 12 13 0 19 16 26 20 0 21 )
RESET_GPIO=${RESET_GPIO:-${GPIO_MAP[$RESET_PIN]}}

# The RAK833-SPI/USB has a SPDT to select USB/SPI interfaces
# If used with RAK2247 or RAK2287 hats this is wired to GPIO20
if [[ "$MODEL" == "RAK833" ]]; then
    if [[ "$INTERFACE" != "USB" ]]; then
        POWER_EN_GPIO=${POWER_EN_GPIO:-20}
        POWER_EN_LOGIC=${POWER_EN_LOGIC:-0}
    fi
fi

# Otherwise the default is no power enable pin
POWER_EN_GPIO=${POWER_EN_GPIO:-0}
POWER_EN_LOGIC=${POWER_EN_LOGIC:-1}

# Raspberry Pi requires using libgpiod with gpiochip4
if [[ `cat /proc/cpuinfo | grep "Raspberry Pi 5"` != "" ]]; then
    USE_LIBGPIOD=${USE_LIBGPIOD:-1}
    GPIO_CHIP=${GPIO_CHIP:-gpiochip4}
else
    USE_LIBGPIOD=${USE_LIBGPIOD:-0}
    GPIO_CHIP=${GPIO_CHIP:-gpiochip0}
fi

# Create reset file
create_reset

# -----------------------------------------------------------------------------
# Radio device auto-discovery
# -----------------------------------------------------------------------------

if [[ "${DEVICE}" == "AUTO" ]]; then

    unset DEVICE

    # Look for concentrator
    discover_concentrator $INTERFACE $DESIGN ${RADIO_NUM:-1}
    if [[ $? -ne 0 ]]; then

        DESIGN=${OUTPUT[0]}
        DEVICE=${OUTPUT[1]}
        CHIP_ID=${OUTPUT[2]}

    else

        echo -e "${COLOR_WARNING}ERROR: DEVICE set to auto discover but no concentrator found! (INTERFACE set to $INTERFACE) ${COLOR_END}"

    fi

fi

# -----------------------------------------------------------------------------
# Radio device defaults
# -----------------------------------------------------------------------------

# If DEVICE not yet defined, use sensible defaults
if [[ "${DEVICE}" == "" ]]; then
    if [[ "${INTERFACE}" == "SPI" ]]; then
        DEVICE=${DEVICE:-"/dev/spidev0.0"}
    else
        MODELS_WITHOUT_ACM="RAK833 RAK2247"
        if [[ $MODELS_WITHOUT_ACM =~ (^|[[:space:]])$MODEL($|[[:space:]]) ]]; then
            DEVICE=${DEVICE:-"/dev/ttyUSB0"}
        fi
        DEVICE=${DEVICE:-"/dev/ttyACM0"}
    fi
fi

# Assert device
if [[ ! -e $DEVICE ]]; then
    echo -e "${COLOR_ERROR}ERROR: $DEVICE does not exist${COLOR_END}"
    idle
fi

export LORAGW_SPI=$DEVICE

# -----------------------------------------------------------------------------
# Fix interface based on DEVICE
# -----------------------------------------------------------------------------

if [[ "${DEVICE}" == *"spi"* ]]; then 
    INTERFACE="SPI"
else 
    INTERFACE="USB"
fi

# -----------------------------------------------------------------------------
# Fix SPI speed based on CONCENTRATOR
# -----------------------------------------------------------------------------

# Set default SPI speed and clock source for SX1301 and SX1308 concentrators to 2MHz and radio_1
if [[ "${INTERFACE}" == "SPI" ]]; then
    if [[ "${CONCENTRATOR}" == "SX1301" ]] || [[ "${CONCENTRATOR}" == "SX1308" ]]; then
        SPI_SPEED=${SPI_SPEED:-2000000}
        CLKSRC=${CLKSRC:-1}
    fi
fi

export LORAGW_SPI_SPEED=${SPI_SPEED:-8000000}

# -----------------------------------------------------------------------------
# Gateway EUI
# -----------------------------------------------------------------------------

# Source to get the EUI from
GATEWAY_EUI_NIC=${GATEWAY_EUI_NIC:-"manual"}
GATEWAY_EUI_SOURCE=${GATEWAY_EUI_SOURCE:-$GATEWAY_EUI_NIC}

# Check if we should get the GATEWAY_EUI from the chip
if [[ "$GATEWAY_EUI_SOURCE" == "chip" ]]; then

    # Check if it's already cached
    if [[ "$CHIP_ID" != "" ]]; then
        GATEWAY_EUI=${CHIP_ID}    
    else
        chip_id $DESIGN $DEVICE
        if [[ $? -eq 1 ]]; then
            CHIP_ID=${OUTPUT[2]}
            GATEWAY_EUI=${CHIP_ID}
        fi
    fi

fi

# If still no GATEWAY_EUI, try building it from a NIC MAC
if [[ "$GATEWAY_EUI" == "" ]]; then

    if [[ "$GATEWAY_EUI_SOURCE" == "chip" ]]; then
        GATEWAY_EUI_SOURCE="eth0"
    fi

    if [[ `grep "$GATEWAY_EUI_SOURCE" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_SOURCE="eth0"
    fi
    if [[ `grep "$GATEWAY_EUI_SOURCE" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_SOURCE="wlan0"
    fi
    if [[ `grep "$GATEWAY_EUI_SOURCE" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_SOURCE="usb0"
    fi
    if [[ `grep "$GATEWAY_EUI_SOURCE" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_SOURCE="eth1"
    fi
    if [[ `grep "$GATEWAY_EUI_SOURCE" /proc/net/dev` == "" ]]; then
        # Last chance: get the most used NIC based on received bytes
        GATEWAY_EUI_SOURCE=$(cat /proc/net/dev | tail -n+3 | sort -k2 -nr | head -n1 | cut -d ":" -f1 | sed 's/ //g')
    fi
    if [[ `grep "$GATEWAY_EUI_SOURCE" /proc/net/dev` == "" ]]; then
        echo -e "${COLOR_ERROR}ERROR: No network interface found. Cannot set gateway EUI.${COLOR_END}"
    fi
    GATEWAY_EUI=$(ip link show $GATEWAY_EUI_SOURCE | awk '/ether/ {print $2}' | awk -F\: '{print $1$2$3"FFFE"$4$5$6}')

fi

# Normalize EUI
GATEWAY_EUI=${GATEWAY_EUI^^}

# Check we have an EUI
if [[ -z ${GATEWAY_EUI} ]] ; then
    echo -e "${COLOR_ERROR}ERROR: GATEWAY_EUI not set.${COLOR_END}"
	idle
fi

# -----------------------------------------------------------------------------
# Debug
# -----------------------------------------------------------------------------

echo -e "${COLOR_WARNING}------------------------------------------------------------------${COLOR_END}"
echo -e "${COLOR_WARNING}BasicStation (TM) Packet Forwarder Container v${VERSION}${COLOR_END}"
echo -e "${COLOR_WARNING}(c) Xose Pérez 2022-2024${COLOR_END}"
echo -e ""
echo -e "${COLOR_WARNING}Based on:${COLOR_END}"
echo -e "${COLOR_WARNING} * basicstation v2.0.6${COLOR_END}"
echo -e "${COLOR_WARNING} * sx1302_hal v2.1.0${COLOR_END}"
echo -e "${COLOR_WARNING}------------------------------------------------------------------${COLOR_END}"

echo -e ""

echo -e "${COLOR_INFO}Protocol${COLOR_END}"
echo -e "${COLOR_INFO}------------------------------------------------------------------${COLOR_END}"
echo -e "${COLOR_INFO}Mode:          ${MODE}${COLOR_END}"
echo -e "${COLOR_INFO}Protocol:      ${PROTOCOL}${COLOR_END}"
if [[ "$PROTOCOL" == "CUPS" ]]; then
echo -e "${COLOR_INFO}CUPS Server:   ${CUPS_URI}${COLOR_END}"
else
echo -e "${COLOR_INFO}LNS Server:    ${TC_URI}${COLOR_END}"
fi
echo -e "${COLOR_INFO}Gateway EUI:   ${GATEWAY_EUI}${COLOR_END}"
echo -e "${COLOR_INFO}EUI Source:    ${GATEWAY_EUI_SOURCE}${COLOR_END}"

echo -e ""

echo -e "${COLOR_INFO}Radio${COLOR_END}"
echo -e "${COLOR_INFO}------------------------------------------------------------------${COLOR_END}"
echo -e "${COLOR_INFO}Model:         ${MODEL}${COLOR_END}"
echo -e "${COLOR_INFO}Concentrator:  ${CONCENTRATOR}${COLOR_END}"
echo -e "${COLOR_INFO}Design:        ${DESIGN^^}${COLOR_END}"
echo -e "${COLOR_INFO}Interface:     ${INTERFACE}${COLOR_END}"
echo -e "${COLOR_INFO}Radio Device:  ${DEVICE}${COLOR_END}"
if [[ "$CHIP_ID" != "" ]]; then
echo -e "${COLOR_INFO}Chip ID:       ${CHIP_ID}${COLOR_END}"
fi

if [[ "$INTERFACE" == "SPI" ]]; then
echo -e "${COLOR_INFO}SPI Speed:     ${LORAGW_SPI_SPEED}${COLOR_END}"
if [[ $USE_LIBGPIOD -eq 1 ]]; then
echo -e "${COLOR_INFO}GPIO chip:     ${GPIO_CHIP}${COLOR_END}"
fi
echo -e "${COLOR_INFO}Reset GPIO:    ${RESET_GPIO}${COLOR_END}"
echo -e "${COLOR_INFO}Enable GPIO:   ${POWER_EN_GPIO}${COLOR_END}"
fi
if [[ $POWER_EN_GPIO -ne 0 ]]; then
echo -e "${COLOR_INFO}Enable Logic:  ${POWER_EN_LOGIC}${COLOR_END}"
fi

echo -e ""

# -----------------------------------------------------------------------------
# Push to Balena
# -----------------------------------------------------------------------------

[[ "$BALENA_DEVICE_UUID" != "" ]] && balena_set_label "EUI" "$GATEWAY_EUI"

# -----------------------------------------------------------------------------
# Generate dynamic configuration files
# -----------------------------------------------------------------------------

# Link the corresponding configuration file
if [[ ! -f $CONFIG_FILE ]]; then
    cp /app/station.${DESIGN}.conf $CONFIG_FILE
    sed -i "s#\"device\":\s*.*,#\"device\": \"${INTERFACE,,}:${DEVICE}\",#" $CONFIG_FILE
    sed -i "s#\"routerid\":\s*.*,#\"routerid\": \"${GATEWAY_EUI}\",#" $CONFIG_FILE
    sed -i "s#\"clksrc\":\s*.*,#\"clksrc\": ${CLKSRC:-0},#" $CONFIG_FILE
fi

# If stdn variant (or any *n variant) we need at least one slave concentrator
if [[ ! -f ./slave-0.conf ]]; then
    echo "{}" > ./slave-0.conf
fi

# CUPS protocol
if [[ "$PROTOCOL" == "CUPS" ]]; then
    if [[ ! -f ./cups.uri ]]; then 
        echo "$CUPS_URI" > cups.uri
    fi
    if [[ ! -f ./cups.trust ]]; then 
        if [[ "$CUPS_TRUST" == "" ]]; then
            cp /app/cacert.pem cups.trust
        else
            clean_certs_keys "$CUPS_TRUST" > cups.trust
        fi
    fi
    if [[ ! -f ./cups.crt ]]; then 
        if [[ "$CUPS_CRT" != "" ]]; then
            clean_certs_keys "$CUPS_CRT" > cups.crt
        fi
    fi
    if [[ ! -f ./cups.key ]]; then 
        if [[ ! -f ./cups.crt ]]; then 
	        echo "Authorization: Bearer $CUPS_KEY" | perl -p -e 's/\r\n|\n|\r/\r\n/g'  > cups.key
        else
            clean_certs_keys "$CUPS_KEY" > cups.key
        fi
    fi
fi

# LNS protocol
if [[ "$PROTOCOL" == "LNS" ]]; then
    if [[ ! -f ./tc.uri ]]; then 
        echo "$TC_URI" > tc.uri
    fi
    if [[ ! -f ./tc.trust ]]; then 
        if [[ "$TC_TRUST" == "" ]]; then
            cp /app/cacert.pem tc.trust
        else
            clean_certs_keys "$TC_TRUST" > tc.trust
        fi
    fi
    if [[ ! -f ./tc.crt ]]; then 
        if [[ "$TC_CRT" != "" ]]; then
            clean_certs_keys "$TC_CRT" > tc.crt
        fi
    fi
    if [[ ! -f ./tc.key ]]; then 
        if [[ ! -f ./tc.crt ]]; then
        	echo "Authorization: Bearer $TC_KEY" | perl -p -e 's/\r\n|\n|\r/\r\n/g'  > tc.key
        else
            clean_certs_keys "$TC_KEY" > tc.key
        fi
    fi
fi

# -----------------------------------------------------------------------------
# Start packet forwarder
# -----------------------------------------------------------------------------

STATION_RADIOINIT=/app/config/reset.sh /app/design-${DESIGN}/bin/station -f
