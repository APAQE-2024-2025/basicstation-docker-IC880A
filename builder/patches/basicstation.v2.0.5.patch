diff --git a/deps/lgw/v5.0.1-kerlink.patch b/deps/lgw/v5.0.1-kerlink.patch
index 8a2281b..2e9a122 100644
--- a/deps/lgw/v5.0.1-kerlink.patch
+++ b/deps/lgw/v5.0.1-kerlink.patch
@@ -125,7 +125,8 @@ index c01ed1c..0e2b64c 100644
 @@ -54,7 +54,7 @@ Maintainer: Sylvain Miermont
  #define READ_ACCESS     0x00
  #define WRITE_ACCESS    0x80
- #define SPI_SPEED       8000000
+-#define SPI_SPEED       8000000
++#define SPI_SPEED       (getenv("SPI_SPEED")==NULL ? 8000000 : getenv("SPI_SPEED"))
 -#define SPI_DEV_PATH    "/dev/spidev0.0"
 +#define SPI_DEV_PATH    (getenv("LORAGW_SPI")==NULL ? "/dev/spidev0.0" : getenv("LORAGW_SPI"))
  //#define SPI_DEV_PATH    "/dev/spidev32766.0"
diff --git a/deps/lgw/v5.0.1-linux.patch b/deps/lgw/v5.0.1-linux.patch
index 8a2281b..4a93620 100644
--- a/deps/lgw/v5.0.1-linux.patch
+++ b/deps/lgw/v5.0.1-linux.patch
@@ -125,7 +125,8 @@ index c01ed1c..0e2b64c 100644
 @@ -54,7 +54,7 @@ Maintainer: Sylvain Miermont
  #define READ_ACCESS     0x00
  #define WRITE_ACCESS    0x80
- #define SPI_SPEED       8000000
+-#define SPI_SPEED       8000000
++#define SPI_SPEED       (getenv("SPI_SPEED")==NULL ? 2000000 : getenv("SPI_SPEED"))
 -#define SPI_DEV_PATH    "/dev/spidev0.0"
 +#define SPI_DEV_PATH    (getenv("LORAGW_SPI")==NULL ? "/dev/spidev0.0" : getenv("LORAGW_SPI"))
  //#define SPI_DEV_PATH    "/dev/spidev32766.0"
diff --git a/deps/lgw/v5.0.1-rpi.patch b/deps/lgw/v5.0.1-rpi.patch
index 8a2281b..4a93620 100644
--- a/deps/lgw/v5.0.1-rpi.patch
+++ b/deps/lgw/v5.0.1-rpi.patch
@@ -125,7 +125,8 @@ index c01ed1c..0e2b64c 100644
 @@ -54,7 +54,7 @@ Maintainer: Sylvain Miermont
  #define READ_ACCESS     0x00
  #define WRITE_ACCESS    0x80
- #define SPI_SPEED       8000000
+-#define SPI_SPEED       8000000
++#define SPI_SPEED       (getenv("SPI_SPEED")==NULL ? 2000000 : getenv("SPI_SPEED"))
 -#define SPI_DEV_PATH    "/dev/spidev0.0"
 +#define SPI_DEV_PATH    (getenv("LORAGW_SPI")==NULL ? "/dev/spidev0.0" : getenv("LORAGW_SPI"))
  //#define SPI_DEV_PATH    "/dev/spidev32766.0"
diff --git a/deps/lgw1302/V1.0.5-corecell.patch b/deps/lgw1302/V1.0.5-corecell.patch
index 27caa24..1a9df99 100644
--- a/deps/lgw1302/V1.0.5-corecell.patch
+++ b/deps/lgw1302/V1.0.5-corecell.patch
@@ -298,3 +298,393 @@ index 77c3d4d..487283f 100644
  /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
  
  int timestamp_counter_mode(bool enable_precision_ts, uint8_t max_ts_metrics, uint8_t nb_symbols) {
+diff --git a/libloragw/Makefile b/libloragw/Makefile
+index 262167a..439b23a 100644
+--- a/libloragw/Makefile
++++ b/libloragw/Makefile
+@@ -85,7 +85,7 @@ $(OBJDIR)/%.o: src/%.c $(INCLUDES) inc/config.h | $(OBJDIR)
+ 
+ ### static library
+ 
+-libloragw.a: $(OBJDIR)/loragw_spi.o $(OBJDIR)/loragw_i2c.o $(OBJDIR)/loragw_aux.o $(OBJDIR)/loragw_reg.o $(OBJDIR)/loragw_sx1250.o $(OBJDIR)/loragw_sx125x.o $(OBJDIR)/loragw_sx1302.o $(OBJDIR)/loragw_cal.o $(OBJDIR)/loragw_debug.o $(OBJDIR)/loragw_hal.o $(OBJDIR)/loragw_stts751.o $(OBJDIR)/loragw_gps.o $(OBJDIR)/loragw_sx1302_timestamp.o $(OBJDIR)/loragw_sx1302_rx.o
++libloragw.a: $(OBJDIR)/loragw_spi.o $(OBJDIR)/loragw_i2c.o $(OBJDIR)/loragw_aux.o $(OBJDIR)/loragw_reg.o $(OBJDIR)/loragw_sx1250.o $(OBJDIR)/loragw_sx125x.o $(OBJDIR)/loragw_sx1302.o $(OBJDIR)/loragw_cal.o $(OBJDIR)/loragw_debug.o $(OBJDIR)/loragw_hal.o $(OBJDIR)/loragw_gps.o $(OBJDIR)/loragw_sx1302_timestamp.o $(OBJDIR)/loragw_sx1302_rx.o
+ 	$(AR) rcs $@ $^
+ 
+ ### test programs
+diff --git a/libloragw/inc/loragw_stts751.h b/libloragw/inc/loragw_stts751.h
+deleted file mode 100644
+index b1a898a..0000000
+--- a/libloragw/inc/loragw_stts751.h
++++ /dev/null
+@@ -1,58 +0,0 @@
+-/*
+- / _____)             _              | |
+-( (____  _____ ____ _| |_ _____  ____| |__
+- \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+- _____) ) ____| | | || |_| ____( (___| | | |
+-(______/|_____)_|_|_| \__)_____)\____)_| |_|
+-  (C)2019 Semtech
+-
+-Description:
+-    Basic driver for ST ts751 temperature sensor
+-
+-License: Revised BSD License, see LICENSE.TXT file include in the project
+-*/
+-
+-
+-#ifndef _LORAGW_STTS751_H
+-#define _LORAGW_STTS751_H
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- DEPENDANCIES --------------------------------------------------------- */
+-
+-#include <stdint.h>     /* C99 types */
+-#include <stdbool.h>    /* bool type */
+-
+-#include "config.h"     /* library configuration options (dynamically generated) */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- INTERNAL SHARED TYPES ------------------------------------------------ */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- INTERNAL SHARED FUNCTIONS -------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PUBLIC CONSTANTS ----------------------------------------------------- */
+-
+-#define I2C_PORT_TEMP_SENSOR_0    0x39  /* STTS751-0DP3F */
+-#define I2C_PORT_TEMP_SENSOR_1    0x3B  /* STTS751-1DP3F */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PUBLIC FUNCTIONS ----------------------------------------------------- */
+-
+-/**
+-@brief TODO
+-@param TODO
+-@return TODO
+-*/
+-int stts751_configure(int i2c_fd, uint8_t i2c_addr);
+-
+-/**
+-@brief TODO
+-@param TODO
+-@return TODO
+-*/
+-int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature);
+-
+-#endif
+-
+-/* --- EOF ------------------------------------------------------------------ */
+diff --git a/libloragw/src/loragw_hal.c b/libloragw/src/loragw_hal.c
+index 3b00c09..66d5c97 100644
+--- a/libloragw/src/loragw_hal.c
++++ b/libloragw/src/loragw_hal.c
+@@ -41,7 +41,7 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
+ #include "loragw_sx1250.h"
+ #include "loragw_sx125x.h"
+ #include "loragw_sx1302.h"
+-#include "loragw_stts751.h"
++
+ #include "loragw_debug.h"
+ 
+ /* -------------------------------------------------------------------------- */
+@@ -181,8 +181,8 @@ static lgw_context_t lgw_context = {
+ FILE * log_file = NULL;
+ 
+ /* I2C temperature sensor handles */
+-static int     ts_fd = -1;
+-static uint8_t ts_addr = 0xFF;
++//static int     ts_fd = -1;
++//static uint8_t ts_addr = 0xFF;
+ 
+ /* -------------------------------------------------------------------------- */
+ /* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
+@@ -719,22 +719,23 @@ int lgw_start(void) {
+     dbg_init_gpio();
+ #endif
+ 
++//
+     /* Try to configure temperature sensor STTS751-0DP3F */
+-    ts_addr = I2C_PORT_TEMP_SENSOR_0;
+-    i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
+-    err = stts751_configure(ts_fd, ts_addr);
+-    if (err != LGW_I2C_SUCCESS) {
+-        i2c_linuxdev_close(ts_fd);
+-        ts_fd = -1;
+-        /* Not found, try to configure temperature sensor STTS751-1DP3F */
+-        ts_addr = I2C_PORT_TEMP_SENSOR_1;
+-        i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
+-        err = stts751_configure(ts_fd, ts_addr);
+-        if (err != LGW_I2C_SUCCESS) {
+-            printf("ERROR: failed to configure the temperature sensor\n");
+-            return LGW_HAL_ERROR;
+-        }
+-    }
++//    ts_addr = I2C_PORT_TEMP_SENSOR_0;
++//    i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
++//    err = stts751_configure(ts_fd, ts_addr);
++//    if (err != LGW_I2C_SUCCESS) {
++//        i2c_linuxdev_close(ts_fd);
++//        ts_fd = -1;
++//        /* Not found, try to configure temperature sensor STTS751-1DP3F */
++//        ts_addr = I2C_PORT_TEMP_SENSOR_1;
++//        i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
++//        err = stts751_configure(ts_fd, ts_addr);
++//        if (err != LGW_I2C_SUCCESS) {
++//            printf("ERROR: failed to configure the temperature sensor\n");
++//            return LGW_HAL_ERROR;
++//        }
++//    }
+ 
+     /* set hal state */
+     CONTEXT_STARTED = true;
+@@ -762,10 +763,10 @@ int lgw_stop(void) {
+     lgw_disconnect();
+ 
+     DEBUG_MSG("INFO: Closing I2C\n");
+-    err = i2c_linuxdev_close(ts_fd);
+-    if (err != 0) {
+-        printf("ERROR: failed to close I2C device (err=%i)\n", err);
+-    }
++    //err = i2c_linuxdev_close(ts_fd);
++    //if (err != 0) {
++    //    printf("ERROR: failed to close I2C device (err=%i)\n", err);
++    //}
+ 
+     CONTEXT_STARTED = false;
+     return LGW_HAL_SUCCESS;
+@@ -778,7 +779,9 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+     uint8_t  nb_pkt_fetched = 0;
+     uint16_t nb_pkt_found = 0;
+     uint16_t nb_pkt_left = 0;
+-    float current_temperature, rssi_temperature_offset;
++    //float current_temperature, rssi_temperature_offset;
++	float current_temperature = 30.0;
++    float rssi_temperature_offset;
+ 
+     /* Check that AGC/ARB firmwares are not corrupted, and update internal counter */
+     /* WARNING: this needs to be called regularly by the upper layer */
+@@ -802,11 +805,11 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+     }
+ 
+     /* Apply RSSI temperature compensation */
+-    res = stts751_get_temperature(ts_fd, ts_addr, &current_temperature);
+-    if (res != LGW_I2C_SUCCESS) {
+-        printf("ERROR: failed to get current temperature\n");
+-        return LGW_HAL_ERROR;
+-    }
++    //res = stts751_get_temperature(ts_fd, ts_addr, &current_temperature);
++    //if (res != LGW_I2C_SUCCESS) {
++    //    printf("ERROR: failed to get current temperature\n");
++    //    return LGW_HAL_ERROR;
++    //}
+ 
+     /* Iterate on the RX buffer to get parsed packets */
+     for (nb_pkt_found = 0; nb_pkt_found < ((nb_pkt_fetched <= max_pkt) ? nb_pkt_fetched : max_pkt); nb_pkt_found++) {
+@@ -982,10 +985,10 @@ int lgw_get_eui(uint64_t* eui) {
+ 
+ int lgw_get_temperature(float* temperature) {
+     CHECK_NULL(temperature);
+-
+-    if (stts751_get_temperature(ts_fd, ts_addr, temperature) != LGW_I2C_SUCCESS) {
+-        return LGW_HAL_ERROR;
+-    }
++    *temperature = 30.0;
++    //if (stts751_get_temperature(ts_fd, ts_addr, temperature) != LGW_I2C_SUCCESS) {
++    //    return LGW_HAL_ERROR;
++    //}
+ 
+     return LGW_HAL_SUCCESS;
+ }
+diff --git a/libloragw/src/loragw_stts751.c b/libloragw/src/loragw_stts751.c
+deleted file mode 100644
+index c417dc2..0000000
+--- a/libloragw/src/loragw_stts751.c
++++ /dev/null
+@@ -1,186 +0,0 @@
+-/*
+- / _____)             _              | |
+-( (____  _____ ____ _| |_ _____  ____| |__
+- \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+- _____) ) ____| | | || |_| ____( (___| | | |
+-(______/|_____)_|_|_| \__)_____)\____)_| |_|
+-  (C)2019 Semtech
+-
+-Description:
+-    Basic driver for ST ts751 temperature sensor
+-
+-License: Revised BSD License, see LICENSE.TXT file include in the project
+-*/
+-
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- DEPENDANCIES --------------------------------------------------------- */
+-
+-#include <stdint.h>     /* C99 types */
+-#include <stdbool.h>    /* bool type */
+-#include <stdio.h>      /* printf fprintf */
+-
+-#include "loragw_i2c.h"
+-#include "loragw_stts751.h"
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE MACROS ------------------------------------------------------- */
+-
+-#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
+-#if DEBUG_I2C == 1
+-    #define DEBUG_MSG(str)              fprintf(stderr, str)
+-    #define DEBUG_PRINTF(fmt, args...)  fprintf(stderr,"%s:%d: "fmt, __FUNCTION__, __LINE__, args)
+-    #define CHECK_NULL(a)               if(a==NULL){fprintf(stderr,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", __FUNCTION__, __LINE__);return LGW_REG_ERROR;}
+-#else
+-    #define DEBUG_MSG(str)
+-    #define DEBUG_PRINTF(fmt, args...)
+-    #define CHECK_NULL(a)               if(a==NULL){return LGW_REG_ERROR;}
+-#endif
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
+-
+-#define STTS751_REG_TEMP_H      0x00
+-#define STTS751_REG_STATUS      0x01
+-#define STTS751_STATUS_TRIPT    BIT(0)
+-#define STTS751_STATUS_TRIPL    BIT(5)
+-#define STTS751_STATUS_TRIPH    BIT(6)
+-#define STTS751_REG_TEMP_L      0x02
+-#define STTS751_REG_CONF        0x03
+-#define STTS751_CONF_RES_MASK   0x0C
+-#define STTS751_CONF_RES_SHIFT  2
+-#define STTS751_CONF_EVENT_DIS  BIT(7)
+-#define STTS751_CONF_STOP       BIT(6)
+-#define STTS751_REG_RATE        0x04
+-#define STTS751_REG_HLIM_H      0x05
+-#define STTS751_REG_HLIM_L      0x06
+-#define STTS751_REG_LLIM_H      0x07
+-#define STTS751_REG_LLIM_L      0x08
+-#define STTS751_REG_TLIM        0x20
+-#define STTS751_REG_HYST        0x21
+-#define STTS751_REG_SMBUS_TO    0x22
+-
+-#define STTS751_REG_PROD_ID     0xFD
+-#define STTS751_REG_MAN_ID      0xFE
+-#define STTS751_REG_REV_ID      0xFF
+-
+-#define STTS751_0_PROD_ID       0x00
+-#define STTS751_1_PROD_ID       0x01
+-#define ST_MAN_ID               0x53
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE VARIABLES ---------------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- INTERNAL SHARED VARIABLES -------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE FUNCTIONS ---------------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PUBLIC FUNCTIONS DEFINITION ------------------------------------------ */
+-
+-int stts751_configure(int i2c_fd, uint8_t i2c_addr) {
+-    int err;
+-    uint8_t val;
+-
+-    /* Check Input Params */
+-    if (i2c_fd <= 0) {
+-        printf("ERROR: invalid I2C file descriptor\n");
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    DEBUG_PRINTF("INFO: configuring STTS751 temperature sensor on 0x%02X...\n", i2c_addr);
+-
+-    /* Get product ID  and test which sensor is mounted */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_PROD_ID, &val);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-    switch (val) {
+-        case STTS751_0_PROD_ID:
+-            DEBUG_MSG("INFO: Product ID: STTS751-0\n");
+-            break;
+-        case STTS751_1_PROD_ID:
+-            DEBUG_MSG("INFO: Product ID: STTS751-1\n");
+-            break;
+-        default:
+-            printf("ERROR: Product ID: UNKNOWN\n");
+-            return LGW_I2C_ERROR;
+-    }
+-
+-    /* Get Manufacturer ID */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_MAN_ID, &val);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-    if (val != ST_MAN_ID) {
+-        printf("ERROR: Manufacturer ID: UNKNOWN\n");
+-        return LGW_I2C_ERROR;
+-    } else {
+-        DEBUG_PRINTF("INFO: Manufacturer ID: 0x%02X\n", val);
+-    }
+-
+-    /* Get revision number */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_REV_ID, &val);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-    DEBUG_PRINTF("INFO: Revision number: 0x%02X\n", val);
+-
+-    /* Set conversion resolution to 12 bits */
+-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_CONF, 0x8C); /* TODO: do not hardcode the whole byte */
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    /* Set conversion rate to 1 / second */
+-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_RATE, 0x04);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    return LGW_I2C_SUCCESS;
+-}
+-
+-/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
+-
+-int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature) {
+-    int err;
+-    uint8_t high_byte, low_byte;
+-    int8_t h;
+-
+-    /* Check Input Params */
+-    if (i2c_fd <= 0) {
+-        printf("ERROR: invalid I2C file descriptor\n");
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    /* Read Temperature LSB */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_L, &low_byte);
+-    if (err != 0) {
+-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    /* Read Temperature MSB */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_H, &high_byte);
+-    if (err != 0) {
+-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    h = (int8_t)high_byte;
+-    *temperature = ((h << 8) | low_byte) / 256.0;
+-
+-    DEBUG_PRINTF("Temperature: %f C (h:0x%02X l:0x%02X)\n", *temperature, high_byte, low_byte);
+-
+-    return LGW_I2C_SUCCESS;
+-}
+-
+-/* --- EOF ------------------------------------------------------------------ */
diff --git a/deps/lgw1302/V2.1.0-corecell.patch b/deps/lgw1302/V2.1.0-corecell.patch
new file mode 100644
index 0000000..7a25d0b
--- /dev/null
+++ b/deps/lgw1302/V2.1.0-corecell.patch
@@ -0,0 +1,404 @@
+diff --git a/libloragw/Makefile b/libloragw/Makefile
+index 881442f..117b544 100644
+--- a/libloragw/Makefile
++++ b/libloragw/Makefile
+@@ -12,6 +12,7 @@ CC := $(CROSS_COMPILE)gcc
+ AR := $(CROSS_COMPILE)ar
+ 
+ CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
++CFLAGS += -DNODEBUG
+ 
+ OBJDIR = obj
+ INCLUDES = $(wildcard inc/*.h) $(wildcard ../libtools/inc/*.h)
+@@ -123,7 +124,6 @@ libloragw.a: $(OBJDIR)/loragw_spi.o \
+ 			 $(OBJDIR)/loragw_debug.o \
+ 			 $(OBJDIR)/loragw_hal.o \
+ 			 $(OBJDIR)/loragw_lbt.o \
+-			 $(OBJDIR)/loragw_stts751.o \
+ 			 $(OBJDIR)/loragw_gps.o \
+ 			 $(OBJDIR)/loragw_sx1302_timestamp.o \
+ 			 $(OBJDIR)/loragw_sx1302_rx.o \
+diff --git a/libloragw/inc/loragw_hal.h b/libloragw/inc/loragw_hal.h
+index 6e153a3..9c6a579 100644
+--- a/libloragw/inc/loragw_hal.h
++++ b/libloragw/inc/loragw_hal.h
+@@ -45,6 +45,7 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
+ #define LGW_HAL_SUCCESS     0
+ #define LGW_HAL_ERROR       -1
+ #define LGW_LBT_NOT_ALLOWED 1
++#define LGW_LBT_ISSUE       1
+ 
+ /* radio-specific parameters */
+ #define LGW_XTAL_FREQU      32000000            /* frequency of the RF reference oscillator */
+diff --git a/libloragw/inc/loragw_stts751.h b/libloragw/inc/loragw_stts751.h
+deleted file mode 100644
+index d7a2dcf..0000000
+--- a/libloragw/inc/loragw_stts751.h
++++ /dev/null
+@@ -1,65 +0,0 @@
+-/*
+- / _____)             _              | |
+-( (____  _____ ____ _| |_ _____  ____| |__
+- \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+- _____) ) ____| | | || |_| ____( (___| | | |
+-(______/|_____)_|_|_| \__)_____)\____)_| |_|
+-  (C)2019 Semtech
+-
+-Description:
+-    Basic driver for ST ts751 temperature sensor
+-
+-License: Revised BSD License, see LICENSE.TXT file include in the project
+-*/
+-
+-
+-#ifndef _LORAGW_STTS751_H
+-#define _LORAGW_STTS751_H
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- DEPENDANCIES --------------------------------------------------------- */
+-
+-#include <stdint.h>     /* C99 types */
+-#include <stdbool.h>    /* bool type */
+-
+-#include "config.h"     /* library configuration options (dynamically generated) */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- INTERNAL SHARED TYPES ------------------------------------------------ */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- INTERNAL SHARED FUNCTIONS -------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PUBLIC CONSTANTS ----------------------------------------------------- */
+-
+-/*
+-  0x39: STTS751-0DP3F
+-  0x3B: STTS751-1DP3F
+-  0x38: STTS751-0DP3F on full duplex CN490 ref design
+-  */
+-static const uint8_t I2C_PORT_TEMP_SENSOR[] = {0x39, 0x3B, 0x38};
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PUBLIC FUNCTIONS ----------------------------------------------------- */
+-
+-/**
+-@brief Configure the temperature sensor (ST TS751)
+-@param i2c_fd file descriptor to access the sensor through I2C
+-@param i2c_addr the I2C device address of the sensor
+-@return LGW_I2C_ERROR if fails, LGW_I2C_SUCCESS otherwise
+-*/
+-int stts751_configure(int i2c_fd, uint8_t i2c_addr);
+-
+-/**
+-@brief Get the temperature from the sensor
+-@param i2c_fd file descriptor to access the sensor through I2C
+-@param i2c_addr the I2C device address of the sensor
+-@param temperature pointer to store the temerature read from sensor
+-@return LGW_I2C_ERROR if fails, LGW_I2C_SUCCESS otherwise
+-*/
+-int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature);
+-
+-#endif
+-
+-/* --- EOF ------------------------------------------------------------------ */
+diff --git a/libloragw/src/loragw_debug.c b/libloragw/src/loragw_debug.c
+index 9a81a08..a7136a3 100644
+--- a/libloragw/src/loragw_debug.c
++++ b/libloragw/src/loragw_debug.c
+@@ -29,6 +29,14 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
+ 
+ #include "tinymt32.h"
+ 
++#if defined(NODEBUG)
++void dbg_init_random(void) {}
++void dbg_init_gpio(void) {}
++void dbg_log_buffer_to_file(FILE * file, uint8_t * buffer, uint16_t size) { (void) file; (void) buffer; (void) size; }
++void dbg_log_payload_diff_to_file(FILE * file, uint8_t * buffer1, uint8_t * buffer2, uint16_t size) { (void) file; (void) buffer1; (void) buffer2; (void) size; }
++int dbg_check_payload(struct lgw_conf_debug_s * context, FILE * file, uint8_t * payload_received, uint8_t size, uint8_t ref_payload_idx, uint8_t sf) {(void) context; (void) file; (void) payload_received; (void) size; (void) ref_payload_idx; (void) sf; return 0;}
++#else
++
+ /* -------------------------------------------------------------------------- */
+ /* --- DEBUG CONSTANTS ------------------------------------------------------ */
+ 
+@@ -181,3 +189,4 @@ int dbg_check_payload(struct lgw_conf_debug_s * context, FILE * file, uint8_t *
+ 
+     return 0; /* ignored */
+ }
++#endif
+diff --git a/libloragw/src/loragw_hal.c b/libloragw/src/loragw_hal.c
+index ffc8ec0..8028a99 100644
+--- a/libloragw/src/loragw_hal.c
++++ b/libloragw/src/loragw_hal.c
+@@ -44,7 +44,6 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
+ #include "loragw_sx1261.h"
+ #include "loragw_sx1302.h"
+ #include "loragw_sx1302_timestamp.h"
+-#include "loragw_stts751.h"
+ #include "loragw_ad5338r.h"
+ #include "loragw_debug.h"
+ 
+@@ -202,10 +201,6 @@ static lgw_context_t lgw_context = {
+ /* File handle to write debug logs */
+ FILE * log_file = NULL;
+ 
+-/* I2C temperature sensor handles */
+-static int     ts_fd = -1;
+-static uint8_t ts_addr = 0xFF;
+-
+ /* I2C AD5338 handles */
+ static int     ad_fd = -1;
+ 
+@@ -1093,30 +1088,6 @@ int lgw_start(void) {
+     dbg_init_random();
+ 
+     if (CONTEXT_COM_TYPE == LGW_COM_SPI) {
+-        /* Find the temperature sensor on the known supported ports */
+-        for (i = 0; i < (int)(sizeof I2C_PORT_TEMP_SENSOR); i++) {
+-            ts_addr = I2C_PORT_TEMP_SENSOR[i];
+-            err = i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
+-            if (err != LGW_I2C_SUCCESS) {
+-                printf("ERROR: failed to open I2C for temperature sensor on port 0x%02X\n", ts_addr);
+-                return LGW_HAL_ERROR;
+-            }
+-
+-            err = stts751_configure(ts_fd, ts_addr);
+-            if (err != LGW_I2C_SUCCESS) {
+-                printf("INFO: no temperature sensor found on port 0x%02X\n", ts_addr);
+-                i2c_linuxdev_close(ts_fd);
+-                ts_fd = -1;
+-            } else {
+-                printf("INFO: found temperature sensor on port 0x%02X\n", ts_addr);
+-                break;
+-            }
+-        }
+-        if (i == sizeof I2C_PORT_TEMP_SENSOR) {
+-            printf("ERROR: no temperature sensor found.\n");
+-            return LGW_HAL_ERROR;
+-        }
+-
+         /* Configure ADC AD338R for full duplex (CN490 reference design) */
+         if (CONTEXT_BOARD.full_duplex == true) {
+             err = i2c_linuxdev_open(I2C_DEVICE, I2C_PORT_DAC_AD5338R, &ad_fd);
+@@ -1222,13 +1193,6 @@ int lgw_stop(void) {
+     }
+ 
+     if (CONTEXT_COM_TYPE == LGW_COM_SPI) {
+-        DEBUG_MSG("INFO: Closing I2C for temperature sensor\n");
+-        x = i2c_linuxdev_close(ts_fd);
+-        if (x != 0) {
+-            printf("ERROR: failed to close I2C temperature sensor device (err=%i)\n", x);
+-            err = LGW_HAL_ERROR;
+-        }
+-
+         if (CONTEXT_BOARD.full_duplex == true) {
+             DEBUG_MSG("INFO: Closing I2C for AD5338R\n");
+             x = i2c_linuxdev_close(ad_fd);
+@@ -1253,7 +1217,8 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+     uint8_t nb_pkt_fetched = 0;
+     uint8_t nb_pkt_found = 0;
+     uint8_t nb_pkt_left = 0;
+-    float current_temperature = 0.0, rssi_temperature_offset = 0.0;
++    float current_temperature = 30.0;
++    float rssi_temperature_offset = 0.0;
+     /* performances variables */
+     struct timeval tm;
+ 
+@@ -1597,7 +1562,8 @@ int lgw_get_temperature(float* temperature) {
+ 
+     switch (CONTEXT_COM_TYPE) {
+         case LGW_COM_SPI:
+-            err = stts751_get_temperature(ts_fd, ts_addr, temperature);
++            *temperature = 25.0;
++            err = LGW_HAL_SUCCESS;
+             break;
+         case LGW_COM_USB:
+             err = lgw_com_get_temperature(temperature);
+diff --git a/libloragw/src/loragw_stts751.c b/libloragw/src/loragw_stts751.c
+deleted file mode 100644
+index 7766961..0000000
+--- a/libloragw/src/loragw_stts751.c
++++ /dev/null
+@@ -1,183 +0,0 @@
+-/*
+- / _____)             _              | |
+-( (____  _____ ____ _| |_ _____  ____| |__
+- \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+- _____) ) ____| | | || |_| ____( (___| | | |
+-(______/|_____)_|_|_| \__)_____)\____)_| |_|
+-  (C)2019 Semtech
+-
+-Description:
+-    Basic driver for ST ts751 temperature sensor
+-
+-License: Revised BSD License, see LICENSE.TXT file include in the project
+-*/
+-
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- DEPENDANCIES --------------------------------------------------------- */
+-
+-#include <stdint.h>     /* C99 types */
+-#include <stdbool.h>    /* bool type */
+-#include <stdio.h>      /* printf fprintf */
+-
+-#include "loragw_i2c.h"
+-#include "loragw_stts751.h"
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE MACROS ------------------------------------------------------- */
+-
+-#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
+-#if DEBUG_I2C == 1
+-    #define DEBUG_MSG(str)              fprintf(stdout, str)
+-    #define DEBUG_PRINTF(fmt, args...)  fprintf(stdout,"%s:%d: "fmt, __FUNCTION__, __LINE__, args)
+-    #define CHECK_NULL(a)               if(a==NULL){fprintf(stderr,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", __FUNCTION__, __LINE__);return LGW_REG_ERROR;}
+-#else
+-    #define DEBUG_MSG(str)
+-    #define DEBUG_PRINTF(fmt, args...)
+-    #define CHECK_NULL(a)               if(a==NULL){return LGW_REG_ERROR;}
+-#endif
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
+-
+-#define STTS751_REG_TEMP_H      0x00
+-#define STTS751_REG_STATUS      0x01
+-#define STTS751_STATUS_TRIPT    BIT(0)
+-#define STTS751_STATUS_TRIPL    BIT(5)
+-#define STTS751_STATUS_TRIPH    BIT(6)
+-#define STTS751_REG_TEMP_L      0x02
+-#define STTS751_REG_CONF        0x03
+-#define STTS751_CONF_RES_MASK   0x0C
+-#define STTS751_CONF_RES_SHIFT  2
+-#define STTS751_CONF_EVENT_DIS  BIT(7)
+-#define STTS751_CONF_STOP       BIT(6)
+-#define STTS751_REG_RATE        0x04
+-#define STTS751_REG_HLIM_H      0x05
+-#define STTS751_REG_HLIM_L      0x06
+-#define STTS751_REG_LLIM_H      0x07
+-#define STTS751_REG_LLIM_L      0x08
+-#define STTS751_REG_TLIM        0x20
+-#define STTS751_REG_HYST        0x21
+-#define STTS751_REG_SMBUS_TO    0x22
+-
+-#define STTS751_REG_PROD_ID     0xFD
+-#define STTS751_REG_MAN_ID      0xFE
+-#define STTS751_REG_REV_ID      0xFF
+-
+-#define STTS751_0_PROD_ID       0x00
+-#define STTS751_1_PROD_ID       0x01
+-#define ST_MAN_ID               0x53
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE VARIABLES ---------------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PRIVATE FUNCTIONS ---------------------------------------------------- */
+-
+-/* -------------------------------------------------------------------------- */
+-/* --- PUBLIC FUNCTIONS DEFINITION ------------------------------------------ */
+-
+-int stts751_configure(int i2c_fd, uint8_t i2c_addr) {
+-    int err;
+-    uint8_t val;
+-
+-    /* Check Input Params */
+-    if (i2c_fd <= 0) {
+-        printf("ERROR: invalid I2C file descriptor\n");
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    DEBUG_PRINTF("INFO: configuring STTS751 temperature sensor on 0x%02X...\n", i2c_addr);
+-
+-    /* Get product ID  and test which sensor is mounted */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_PROD_ID, &val);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-    switch (val) {
+-        case STTS751_0_PROD_ID:
+-            DEBUG_MSG("INFO: Product ID: STTS751-0\n");
+-            break;
+-        case STTS751_1_PROD_ID:
+-            DEBUG_MSG("INFO: Product ID: STTS751-1\n");
+-            break;
+-        default:
+-            printf("ERROR: Product ID: UNKNOWN\n");
+-            return LGW_I2C_ERROR;
+-    }
+-
+-    /* Get Manufacturer ID */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_MAN_ID, &val);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-    if (val != ST_MAN_ID) {
+-        printf("ERROR: Manufacturer ID: UNKNOWN\n");
+-        return LGW_I2C_ERROR;
+-    } else {
+-        DEBUG_PRINTF("INFO: Manufacturer ID: 0x%02X\n", val);
+-    }
+-
+-    /* Get revision number */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_REV_ID, &val);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-    DEBUG_PRINTF("INFO: Revision number: 0x%02X\n", val);
+-
+-    /* Set conversion resolution to 12 bits */
+-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_CONF, 0x8C); /* TODO: do not hardcode the whole byte */
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    /* Set conversion rate to 1 / second */
+-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_RATE, 0x04);
+-    if (err != 0) {
+-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    return LGW_I2C_SUCCESS;
+-}
+-
+-/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
+-
+-int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature) {
+-    int err;
+-    uint8_t high_byte, low_byte;
+-    int8_t h;
+-
+-    /* Check Input Params */
+-    if (i2c_fd <= 0) {
+-        printf("ERROR: invalid I2C file descriptor\n");
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    /* Read Temperature LSB */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_L, &low_byte);
+-    if (err != 0) {
+-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    /* Read Temperature MSB */
+-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_H, &high_byte);
+-    if (err != 0) {
+-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
+-        return LGW_I2C_ERROR;
+-    }
+-
+-    h = (int8_t)high_byte;
+-    *temperature = ((h << 8) | low_byte) / 256.0;
+-
+-    DEBUG_PRINTF("Temperature: %f C (h:0x%02X l:0x%02X)\n", *temperature, high_byte, low_byte);
+-
+-    return LGW_I2C_SUCCESS;
+-}
+-
+-/* --- EOF ------------------------------------------------------------------ */
diff --git a/deps/lgw1302/makefile b/deps/lgw1302/makefile
index 2bac66b..0f7aba8 100644
--- a/deps/lgw1302/makefile
+++ b/deps/lgw1302/makefile
@@ -31,7 +31,7 @@ PLT=platform-${platform}
 LGWLIB=${TD}/${BD}/lib/liblgw1302.a
 LGWINC=${TD}/${BD}/include/lgw
 
-LGWVERSION.default = 1.0.5
+LGWVERSION.default = 2.0.1
 LGWVERSION ?= $(or ${LGWVERSION.${platform}}, ${LGWVERSION.default})
 
 HFILES = $(wildcard ${PLT}/libloragw/inc/*.h)
diff --git a/deps/mbedtls/prep.sh b/deps/mbedtls/prep.sh
index 2875cd7..4f774f0 100755
--- a/deps/mbedtls/prep.sh
+++ b/deps/mbedtls/prep.sh
@@ -30,7 +30,7 @@ set -e
 cd $(dirname $0)
 
 if [[ ! -d git-repo ]]; then
-    git clone -b mbedtls-2.6 --single-branch --depth 1 https://github.com/ARMmbed/mbedtls.git git-repo
+    git clone -b mbedtls-2.7.5 --single-branch --depth 1 https://github.com/ARMmbed/mbedtls.git git-repo
 fi
 
 if [[ -z "$platform" ]] || [[ -z "$variant" ]]; then
diff --git a/setup.gmk b/setup.gmk
index a123556..079335b 100644
--- a/setup.gmk
+++ b/setup.gmk
@@ -35,18 +35,23 @@ NQ = $(if ${V},>/dev/null,)
 
 platform ?= linux
 variant  ?= std
+arch     ?= default
 
 -include ${TD}/setup-${platform}.gmk
 
 LOCAL_ARCH := $(shell gcc -dumpmachine)
 
-ARCH.linux   = x86_64-linux-gnu
-ARCH.linuxV2 = x86_64-linux-gnu
-ARCH.linuxpico = x86_64-linux-gnu
-ARCH.corecell  = arm-linux-gnueabihf
-ARCH.rpi     = arm-linux-gnueabihf
-ARCH.kerlink = arm-klk-linux-gnueabi
-ARCH=${ARCH.${platform}}
+ARCH.linux.default   = x86_64-linux-gnu
+ARCH.linuxV2.default = x86_64-linux-gnu
+ARCH.linuxpico.default = x86_64-linux-gnu
+ARCH.corecell.default  = arm-linux-gnueabihf
+ARCH.corecell.armv7hf  = arm-linux-gnueabihf
+ARCH.corecell.aarch64  = aarch64-linux-gnu
+ARCH.rpi.default  = arm-linux-gnueabihf
+ARCH.rpi.armv7hf  = arm-linux-gnueabihf
+ARCH.rpi.aarch64  = aarch64-linux-gnu
+ARCH.kerlink.default = arm-klk-linux-gnueabi
+ARCH=${ARCH.${platform}.${arch}}
 
 export TDfull := $(shell cd ${TD} && pwd)
 TOOLCHAIN=${HOME}/toolchain-${platform}
@@ -167,3 +172,5 @@ LDFLAGS  = -L ${TD}/${BD}/lib ${xLDFLAGS}
 LIBS     = ${xLIBS} ${SYSLIBS}
 FILES    = ${xFILES}
 OCFLAGS  = ${xOCFLAGS}
+
+LGWVERSION.corecell = 2.1.0
diff --git a/src/sx130xconf.c b/src/sx130xconf.c
index 02258d6..d3cf42b 100644
--- a/src/sx130xconf.c
+++ b/src/sx130xconf.c
@@ -221,8 +221,8 @@ static void setDevice (struct sx130xconf* sx130xconf, str_t device) {
     if( n > sz-1 )
         LOG(ERROR, "Device string too long (max %d chars): %s", sz-1, dev);
 #if defined(CFG_sx1302)
-    sz = sizeof(sx130xconf->boardconf.spidev_path);
-    n = snprintf(sx130xconf->boardconf.spidev_path, sz, "%s", dev);
+    sz = sizeof(sx130xconf->boardconf.com_path);
+    n = snprintf(sx130xconf->boardconf.com_path, sz, "%s", dev);
     if( n > sz-1 )
         LOG(ERROR, "Device string too long (max %d chars): %s", sz-1, dev);
 #endif
